1. Selects the names of all products that are not on sale.
  SELECT * FROM products WHERE "on_sale"  = 'f';
    1|2013-04-01 20:09:41.969902|Teddy Bear|17.99|f
    3|2013-04-01 20:09:41.973999|Cat Ears|99.99|f
    6|2013-04-01 20:09:41.978579|Card Against Humanity|25.0|f
    9|2013-04-01 20:09:41.983386|Set of 12 Mason Jars|6.22|f
____________________________________________________________  
2. Selects the names of all products that cost less than £20.
  SELECT * FROM products WHERE "price" < 20;
    1|2013-04-01 20:09:41.969902|Teddy Bear|17.99|f
    4|2013-04-01 20:09:41.975612|The Ruby Programming Language|19.99|t
    5|2013-04-01 20:09:41.977249|Silicon Valley Monopoly|10.99|t
    9|2013-04-01 20:09:41.983386|Set of 12 Mason Jars|6.22|f
____________________________________________________________ 
3. Selects the name and price of the most expensive product.
  SELECT name,  max(price) FROM products;
    Cat Ears|99.99
____________________________________________________________ 
4. Selects the name and price of the second most expensive product.
  SELECT price, name FROM products ORDER BY price DESC LIMIT 1 OFFSET 1;
    82.0|Brown Leather Boots
____________________________________________________________
5. Selects the name and price of the least expensive product.
  SELECT name,  min(price) FROM products;
    Set of 12 Mason Jars|6.22
____________________________________________________________ 
6. Selects the names and prices of all products, ordered by price in descending order.
  SELECT price, name FROM products ORDER BY price DESC, name DESC;
    99.99|Cat Ears
    82.0|Brown Leather Boots
    78.82|Lonely Pillow
    25.0|Hoodie
    25.0|Card Against Humanity
    22.99|Set of silverware
    19.99|The Ruby Programming Language
    17.99|Teddy Bear
    10.99|Silicon Valley Monopoly
    6.22|Set of 12 Mason Jars
____________________________________________________________ 
7. Selects the average price of all products.
  SELECT AVG(price) FROM products;
    38.899
____________________________________________________________ 
8. Selects the sum of the price of all products.
  SELECT SUM(price) FROM products;
    388.99
____________________________________________________________
9. Selects the sum of the price of all products whose prices is less than £20.
  SELECT sum(price) FROM products WHERE price < 20;
    55.19
____________________________________________________________
10. Selects the id of the user with your name.
  SELECT id FROM users WHERE name = 'Filippo Matoso';
    10
____________________________________________________________
11. Selects the names of all users whose names start with the letter "J".
  SELECT * FROM users WHERE name LIKE 'J%';
    1|2013-04-01 20:09:41.926399|Jon Rogers
    2|2013-04-01 20:09:41.932863|James Gotsell
____________________________________________________________
12. Selects the number of users whose first names are "Spencer".
  SELECT * FROM users WHERE name LIKE 'SPENCER%';
  11|2013-04-01 20:09:41.946512|Spencer Meyer
____________________________________________________________
13. Selects the number of users who want a "Teddy Bear".
  SELECT count(user_id) FROM wishlists WHERE product_id = 1;
    6
____________________________________________________________
14. Selects the count of items on the wishlish of the user with your name.
  SELECT count(product_id) FROM wishlists WHERE user_id = 10; 
    7
____________________________________________________________
15. Selects the count and name of all products on the wishlist, ordered by count in descending order.
  SELECT count(user_id), count(product_id) FROM wishlists ORDER BY user_id DESC, product_id DESC;
    76|76
____________________________________________________________
16. Selects the count and name of all products that are not on sale on the wishlist, ordered by count in descending order.
  SELECT products.name, COUNT(product_id) AS noitems FROM wishlists inner join products on products.id = wishlists.product_id group by product_id order by noitems desc;
    Hoodie|17
    Card Against Humanity|16
    Cat Ears|15
    The Ruby Programming Language|9
    Teddy Bear|6
    Silicon Valley Monopoly|5
    Brown Leather Boots|4
    Lonely Pillow|2
    Set of 12 Mason Jars|2
____________________________________________________________
17. Inserts a user with the name "Jonathan Anderson" into the users table. Ensure the created_at column is set to the current time.
  INSERT INTO users (name, created_at) VALUES ("Jonathan Anderson", CURRENT_TIMESTAMP);
    select * from users
    1|2013-04-01 20:09:41.926399|Jon Rogers
    2|2013-04-01 20:09:41.932863|James Gotsell
    3|2013-04-01 20:09:41.934730|Erica Porter
    4|2013-04-01 20:09:41.936167|Christabel Samuels
    5|2013-04-01 20:09:41.937655|Dani Zraikat
    6|2013-04-01 20:09:41.938977|Rane Gowan
    7|2013-04-01 20:09:41.940520|Hassan Mohammadi
    8|2013-04-01 20:09:41.942043|Cheryl Wee
    9|2013-04-01 20:09:41.943542|Tyrone Compton
    10|2013-04-01 20:09:41.945032|Filippo Matoso
    11|2013-04-01 20:09:41.946512|Spencer Meyer
    12|2013-04-01 20:09:41.947799|Elena Sanna
    13|2013-04-01 20:09:41.949360|Gerry Mathe
    14|2013-04-01 20:09:41.951026|ALex Chin
    15|2015-05-25 17:48:23|Jonathan Anderson
____________________________________________________________
18. Selects the id of the user with the name "Jonathan Anderson"?
  SELECT id FROM users WHERE name = "Jonathan Anderson";
    15
____________________________________________________________
19. Inserts a wishlist entry for the user with the name "Jonathan Anderson" for the product "The Ruby Programming Language".
20. Updates the name of the "Jonathan Anderson" user to be "Jon Anderson".
  UPDATE users SET name = "Jon Anderson" WHERE name = "Jonathan Anderson";
  select * from users;
    1|2013-04-01 20:09:41.926399|Jon Rogers
    2|2013-04-01 20:09:41.932863|James Gotsell
    3|2013-04-01 20:09:41.934730|Erica Porter
    4|2013-04-01 20:09:41.936167|Christabel Samuels
    5|2013-04-01 20:09:41.937655|Dani Zraikat
    6|2013-04-01 20:09:41.938977|Rane Gowan
    7|2013-04-01 20:09:41.940520|Hassan Mohammadi
    8|2013-04-01 20:09:41.942043|Cheryl Wee
    9|2013-04-01 20:09:41.943542|Tyrone Compton
    10|2013-04-01 20:09:41.945032|Filippo Matoso
    11|2013-04-01 20:09:41.946512|Spencer Meyer
    12|2013-04-01 20:09:41.947799|Elena Sanna
    13|2013-04-01 20:09:41.949360|Gerry Mathe
    14|2013-04-01 20:09:41.951026|ALex Chin
    15|2015-05-25 17:48:23|Jon Anderson
____________________________________________________________
21. Deletes the user with the name "Jon Anderson".
22. Deletes the wishlist item for the user you just deleted.